//SecretAim - ZenJamie, the new script leader.
define antirecoilstrength = 20;
int Anti_Recoil = TRUE;
define ZenJamieAssist    = TRUE; 
define ZenJamieAssistHip = TRUE;
define PolarAssist     = TRUE; 
define PolarBoost      = FALSE; 
define PolarHipFire    = FALSE;  

// Binds
define AimY   = PS4_RY;
define AimX   = PS4_RX; 
define FireBtn    = XB1_RT;
define AdsBtn     = XB1_LT; 
define Wall     = PS4_R2;
define Floor    = PS4_R1; 
define Ramp     = PS4_L2; 
define Trap     = PS4_SQUARE; 
define Roof     = PS4_L1;
define Strafe   = PS4_LX;
define Walk     = PS4_LY;
define Build = PS4_CIRCLE; 
define Switch   = PS4_CIRCLE; 
define Pickaxe    = PS4_TRIANGLE; 
define strafetoggle = PS4_SHARE;

// ZenJamie Assist Settings
define Radius          = 4;    
define Angle           = 4;   
define RadiusBoost     = 7;    
define AngleBoost      = 9;    

// PremiumScript - ZenJamie - The new script leader

int DamAngle, DamCos, DamSin, DamX, DamY, ActualMagnitude, MaxMagnitude, RadiusDam, AngleDam, AAT, Axis, BuildTrack, BuildCount, BuildSyncTime;
int AR_Ver;
int AR_Horiz;
int AntirecoilVertical, AntirecoilHorizontal;

init {  
    Anti_Recoil     = get_pvar(SPVAR_3,  1,  1,   1); 
    AR_Ver          = get_pvar(SPVAR_11, 1, 99,  antirecoilstrength);
    AR_Horiz        = get_pvar(SPVAR_12, -99, 99, 0);
}

define AATimed = FALSE; 
define Power  = 1;   
define AATime = 2000;
int BuildTracker = 1;
int StrafeShot = TRUE;
int StrafeWait = 1;
int greetings = TRUE;

main {
    if (greetings) {
        combo_run(vibrate1)
    }

    if (BuildTracker) {
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
        if (BuildTrack) {
            BuildCount += get_rtime();
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = FALSE;
                BuildCount = 0;
            }
            if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap)) {
                BuildCount = 0;
            }
        }
    }

    if (!BuildTrack) {
        if (ZenJamieAssist) {
            if (AATimed) {
                if (get_ival(AdsBtn) && get_ptime(AdsBtn) <= AATime || ZenJamieAssistHip && get_ival(FireBtn) && get_ptime(FireBtn) <= AATime) {
                    AimAssist();
                }
            } else if (get_ival(AdsBtn) || ZenJamieAssistHip && get_ival(FireBtn)) {
                AimAssist();
            }
            if (!get_ival(AdsBtn) && !get_ival(FireBtn)) {
                AAT = 0;
                Axis = 0;
            }
        }

        if (PolarAssist) {
            if (get_ival(AdsBtn) || (PolarHipFire && get_ival(FireBtn))) {
                DamX = get_ival(AimX);
                DamY = get_ival(AimY);
                ActualMagnitude = isqrt(pow(DamX,2) + pow(DamY,2));
                MaxMagnitude = (ActualMagnitude < 100);

                if (PolarBoost && get_ival(FireBtn)) {
                    RadiusDam = Radius + RadiusBoost;
                    AngleDam = AngleBoost;
                } else {
                    RadiusDam = Radius;
                    AngleDam = 0;
                }

                DamAngle += Angle + AngleDam;
                DamAngle = DamAngle % 360;
                DamSin = DamPolar[DamAngle % 360];
                DamCos = DamPolar[(DamAngle + 270) % 360];
                DamCos = (DamCos * RadiusDam) / 100;
                DamSin = (DamSin * RadiusDam) / 100;

                if (ActualMagnitude <= 10) {
                    DamSin -= DamY;
                    DamCos -= DamX;
                } else {
                    DamSin = (DamSin * (200 - ((abs(DamY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;
                    DamCos = (DamCos * (200 - ((abs(DamX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;
                }

                set_val(AimX, clamp(DamX + DamCos, -100, 100));
                set_val(AimY, clamp(DamY + DamSin, -100, 100));
            }
        }

        if (Anti_Recoil) {
            if (get_ival(AdsBtn) && get_ival(FireBtn)) {
                combo_run(AntiRecoil);
            }
        }

        if (StrafeShot) {
            if (event_press(strafetoggle)) {
                StrafeShot = FALSE;
            }
        } else {
            if (event_press(strafetoggle)) {
                StrafeShot = TRUE;
            }
        }

        if (StrafeShot) {
            combo_run(StrafeShot)
        }

        if (StrafeShot) {
            if (StrafeShot && abs(get_ival(Strafe)) <= 35 && abs(get_ival(Walk)) <= 35) {
                combo_run(StrafeShot);
            } else {
                combo_stop(StrafeShot);
            }
        }
    }
}

function AimAssist() {
    AAT += get_rtime();
    if (!Axis)
        set_Val(AimY, AAT * Power / 10);
    if (Axis == 1)
        set_Val(AimX, AAT * Power / 10);
    if (Axis == 2)
        set_Val(AimY, inv(AAT * Power / 10));
    if (Axis == 3) {
        set_Val(AimX, inv(AAT * Power / 10));
        if (AAT > 50) {
            AAT = 0;
            Axis = 0;
        }
    } else if (AAT > 50) {
        AAT = 0;
        Axis += 1;
    }
}

function set_Val(Input, Output) {
    set_val

    (Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
    return;
}

combo AntiRecoil {
    AntirecoilVertical = get_val(PS4_RY) + AR_Ver;
    if (AntirecoilVertical > 100) AntirecoilVertical = 100;
    if (abs(get_val(PS4_RY)) < abs(AR_Ver) + 5)
        set_val(PS4_RY, (AntirecoilVertical));

    AntirecoilHorizontal = get_val(PS4_RX) + AR_Horiz;
    if (AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if (abs(get_val(PS4_RX)) < abs(AR_Horiz) + 5)
        set_val(PS4_RX, AntirecoilHorizontal);
}

combo StrafeShot {
    set_val(Strafe, -100);
    wait(StrafeWait);
    set_val(Strafe, 100);
}

combo vibrate1 {
    set_rumble(RUMBLE_A, 50);
    wait(300);
    set_rumble(RUMBLE_A, 100);
    wait(600);
    reset_rumble();
    greetings = FALSE;
}

const int8 DamPolar[] = {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100
};

const int16 BOOT_LOGO[] = { 
121, 58,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0xC030,0x1FE0,0x0000,0x0000,0x0000,0x0C00,
    0x0000,0x0070,0x380F,0xF000,0x0000,0x0000,0x0006,0x0000,0x0000,0x381C,0x0618,0x0000,0x0000,0x0000,0x0303,0x0000,0x1E0E,0x0E03,0x0C00,0x0000,0x0000,0x0003,0xC180,0x0007,0x0707,0x0186,0x0000,0x0000,0x0001,0x81E0,0x0000,0x03C3,
    0xC380,0xC300,0x0000,0x0000,0x00C0,0xF000,0x0000,0xE0E1,0xC061,0x8000,0x0000,0x0000,0x6078,0x0000,0x0070,0x40E0,0x3800,0x0000,0x0000,0x0070,0x2C00,0x0000,0x1C00,0x700C,0x01FC,0x3F87,0xF1FC,0x7E13,0x0C6F,0x3C0E,0x0038,0x0300,
    0xC718,0xE3D8,0xC71C,0x1986,0x3FFE,0x0000,0x3800,0xC061,0x8C31,0x8C61,0x860C,0xC31C,0x6300,0x001C,0x0070,0x30C6,0x18C6,0x30C3,0x0661,0x8C31,0x8000,0x1E00,0x1C18,0x6300,0x6318,0x6183,0x30C6,0x18C0,0x000E,0x0007,0x0FF1,0x8030,
    0x0FF0,0xC198,0x630C,0x6000,0x0F00,0x4187,0x00C0,0x1807,0x0061,0x8631,0x8630,0x0007,0x0030,0xC300,0x600C,0x0300,0x30FF,0x18C3,0x1800,0x0700,0x1861,0x8630,0x0601,0x8618,0x7F8C,0x618C,0x0007,0x800C,0x30C3,0x1863,0x00C3,0x0C30,
    0xC630,0xC600,0x0780,0x0618,0x618C,0x3180,0x6186,0x1863,0x1863,0x000F,0x8003,0xFC3F,0xC7F8,0xC03F,0xC38C,0x398C,0x3180,0x1F80,0x01FE,0x0FC1,0xF860,0x0FC1,0xEC0C,0xC618,0xC03F,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x1F00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0006,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x01F0,0xFC66,0x061C,0x3FCF,0x8060,0x63E0,0x0000,0x0000,0xFC7E,0x3303,0x1F1F,0xE7C0,0x3031,0xFC00,0x0000,0x0063,0x3199,
    0x8198,0xC183,0x0018,0x1986,0x0000,0x0000,0x3198,0xCCC0,0xCC60,0xC180,0x0C0C,0xC300,0x0000,0x0018,0xCC66,0x70E6,0x3060,0xC007,0x0E61,0x8000,0x0000,0x0C66,0x331C,0xE318,0x3060,0x01CE,0x00C0,0x0000,0x0006,0x3319,0x8E71,0x8C18,
    0x3000,0xE700,0xE000,0x0000,0x03F1,0xF8C7,0x38FE,0x0C18,0x0073,0x80F0,0x0000,0x0001,0xF0FC,0x639C,0x7F06,0x0F80,0x39C0,0x6000,0x0000,0x00C0,0x6331,0xCE31,0x8307,0xC01C,0xE070,0x0000,0x0000,0x6031,0x98E7,0x18C1,0x8300,0x0E70,
    0x7800,0x0000,0x0030,0x18CC,0x730C,0x60C1,0x8007,0x3838,0x0000,0x0000,0x180C,0x6619,0x8630,0x60C0,0x0198,0x1800,0x0000,0x000C,0x0633,0x0CC3,0x1830,0x6000,0xCC18,0x0000,0x0000,0x0603,0x1987,0xE18C,0x1830,0x007E,0x1800,0x0000,
    0x0003,0x018C,0xC1E0,0xC60C,0x1800,0x1E0E,0x0000,0x0000,0x0180,0xC660,0x6063,0x060F,0x8006,0x07F8,0x0000,0x0000,0xC063,0x3030,0x3183,0x07C0,0x0301,0xFC00,0x0000
}

int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData;                      
                                                      
function DrawLogo(x, y, invert) 
{                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) 
    {        
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) 
        {     
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) 
            {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) 
            {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) 
            {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;             
            if (!logoBit) 
            {   
                logoBit = 16;     
                logoOffset++;     
            }  
        }   
    }    
}                                                                
   

int LastAATime;
int LastAxisChangeTime;


 ����������������
